<?xml version="1.0"?>

<project name="Educalife" basedir="." default="deployWar">

	<property name="project" value="Educalife" />
	<property name="ox3" value="true" />
	<property name="openxava.base.dir" value=".."/> <!-- Change if you want OpenXava and Addons in another folder -->
	<property file="../openxava.properties"/>
	
	<property name="default.language" value="pt"/>
	<property name="datasource" value="DataSource"/>
	<property name="datasource.prefix" value="java:"/>
	<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
	<property name="dist.base.dir" value = ".."/>
	<property name="dist.dir" value = "${dist.base.dir}/${project}.dist"/>
	<property name="dist.portlets.dir" value = "${dist.base.dir}/${project}-portlets.war.d"/>
	<property name="file.ear" value = "${project}.ear"/>
	<property name="xava.lib" value="${openxava.base.dir}/OpenXava/bin"/>
	<property name="j2ee.lib" value="${openxava.base.dir}/OpenXava/lib/servlet-api.jar;${openxava.base.dir}/OpenXava/web/WEB-INF/lib/jta.jar;${openxava.base.dir}/OpenXava/web/WEB-INF/lib/ejb.jar;${openxava.base.dir}/OpenXava/lib/jsp-api.jar"/>
	<property name="tl.lib" location="${openxava.base.dir}/OpenXava/lib/tl.jar"/>
	<property name="logging.lib" location="${openxava.base.dir}/OpenXava/web/WEB-INF/lib/commons-logging.jar"/>
	<property name="generator.dir" value="..${file.separator}OpenXava${file.separator}generator"/>
	<property name="subcontext" value="${project}"/>
	<property name="classes.dir" value="web/WEB-INF/classes"/>
	<property name="name.war" value="${project}"/>
	<property name="separator" value="."/>
	<property name="meta-inf.dir" value="build/ejb/META-INF"/>
	<property name="project.name" value = "${project}"/>
	<property name="name.jar" value = "${project.name}"/>
	<property name="server.properties.dir" value="${openxava.base.dir}/OpenXava/build/server-properties"/>
	<property name="server.properties.tmp.dir" value="${user.home}/tmpServerProperties"/>
	<property name="model.package" value="model"/>
	<property name="javac.version" value="11"/>
	<property name="portlet.encoding" value="UTF-8"/>
	<property name="deploy.portlets.dir" value="${deploy.dir}/openxava${war.dir.suffix}/WEB-INF/deploy"/>
	<property name="generate.jetspeed2.files" value="true"/>
	<property name="jetspeed2.pages.dir" value="${deploy.dir}/openxava${war.dir.suffix}/WEB-INF/pages"/>
	<property name="portlets.default.locale" value="en"/>
	<property name="hibernate.properties" value=""/>
	<property name="compile.src.path" value="../${project}/src"/>
	
	<!-- 
	Compile all .java and .groovy 
	Not needed to call it if you work inside Eclipse
	-->
	<target name="compile"> 
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="compile"/>
	</target>	    	
	
	<!-- 
	Build and deploy the application in war format. 
	It deploys it on the Tomcat included in OpenXava distribution, 
	to deploy to other location modify the tomcat.dir property of workspace/openxava.properties.
	-->	
	<target name="deployWar">
		<!-- In a directory -->
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="deploy"/>
		<!-- In a file (it does not work well on windows + tomcat)
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="deployWar"/>
		-->
	</target>
	
	<!-- 
	Build the application in war format.
	Leaves the war in the workspace.dist/YourApplication.dist folder.
	 -->	
	<target name="createWar">
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="createWar"/>
	</target>				

	
	<!--
	Build the application in portlets format 
	-->		
	<target name="generatePortlets"> 
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="generatePortlets"/>
	</target>
	
	<!--
	Update this project with the latest OpenXava version present in the workspace.
	It must be called just after update the OpenXava version.
	-->
	<target name="updateOX">
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="updateOX"/>
	</target>
	
	<!--
	Connects to your database and updates your schema in order to match to your current application.
	Remember to give value to schema.path with the path of the JDBC driver jar for your database.
	-->
	<target name="updateSchema">
		<ant antfile="${openxava.base.dir}/OpenXava/build.xml" target="updateSchemaJPA">			
			<property name="persistence.unit" value="junit"/>
			<property name="schema.path" value="../OpenXava/lib/hsqldb.jar"/>
		</ant>
	</target>	

	<!--
		Alvo especÃ­fico para gerar o arquivo WAR do projeto
	-->
	<target name="deployEducalife" depends="prepareWar">
		<jar jarfile="${dist.dir}/${name.war}.war" basedir="web"/>
	</target>

	<target name="init">
		<tstamp/>
		<available file="../${project.name}/filtered-files" type="dir"
			property="classic-xml"/>
	</target>

	<target name="createDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/lib"/>
	</target>

	<target name="copyComponentDTDs" if="xml.components">
		<copy todir="../${project}/components/dtds" overwrite="true">
			<fileset dir="${openxava.base.dir}/OpenXava/xava/dtds" includes="componente.dtd,component.dtd"/>
		</copy>
	</target>

	<target name="copyXavaDTDs">

		<copy todir="../${project}/xava/dtds" overwrite="true">
			<fileset dir="${openxava.base.dir}/OpenXava/xava/dtds" excludes="componente.dtd,component.dtd"/>
		</copy>

	</target>

	<target name="copyDTDs">

		<antcall target="copyXavaDTDs"/>
		<available file="../${project}/components" type="dir"
		           property="xml.components"/>
		<antcall target="copyComponentDTDs"/>

	</target>

	<target name="filterXavaFilesWithoutConfiguration" unless="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/xava"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<!-- to replace within xava components -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/components"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="access.table" value="${access.table}"/>
			</filterset>
		</copy>
	</target>


	<target name="filterXavaFilesWithConfiguration" if="configuration">
		<!-- to replace within xava files -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/xava"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<!-- to replace within xava components -->
		<copy todir="../${project.name}/filtered-files" overwrite="${overwrite.xava.files}">
			<fileset dir="../${project.name}/components"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="access.table" value="${access.table}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterXavaFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterXavaFilesWithConfiguration">
			<param name="overwrite.xava.files" value="true"/>
		</antcall>
		<antcall target="filterXavaFilesWithoutConfiguration">
			<param name="overwrite.xava.files" value="true"/>
		</antcall>
	</target>

	<target name="filterChangedXavaFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterXavaFilesWithConfiguration">
			<param name="overwrite.xava.files" value="false"/>
		</antcall>
		<antcall target="filterXavaFilesWithoutConfiguration">
			<param name="overwrite.xava.files" value="false"/>
		</antcall>
	</target>

	<target name="filterHibernateFilesWithoutConfiguration" unless="configuration">
		<copy todir="../${project.name}/filtered-files" failonerror="false" overwrite="${overwrite.hibernate.files}">
			<fileset dir="${openxava.base.dir}/OpenXava/hibernate"/>
			<fileset dir="../${project.name}/hibernate"/>
			<fileset dir="../${project.name}/build/hibernate"/>
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="datasource.prefix" value="${datasource.prefix}"/>
				<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
				<filter token="hibernate.properties" value="${hibernate.properties}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterHibernateFilesWithConfiguration" if="configuration">
		<copy todir="../${project.name}/filtered-files" failonerror="false" overwrite="${overwrite.hibernate.files}">
			<fileset dir="${openxava.base.dir}/OpenXava/hibernate"/>
			<fileset dir="../${project.name}/hibernate"/>
			<fileset dir="../${project.name}/build/hibernate"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="images.schema.definition" value='schema="@images.schema@"'/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="datasource.prefix" value="${datasource.prefix}"/>
				<filter token="hibernate.dialect" value="${hibernate.dialect}"/>
				<filter token="hibernate.properties" value="${hibernate.properties}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterHibernateFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterHibernateFilesWithConfiguration">
			<param name="overwrite.hibernate.files" value="true"/>
		</antcall>
		<antcall target="filterHibernateFilesWithoutConfiguration">
			<param name="overwrite.hibernate.files" value="true"/>
		</antcall>
	</target>

	<target name="filterChangedHibernateFiles" depends="init, copyDTDs" if="classic-xml">
		<antcall target="filterHibernateFilesWithConfiguration">
			<param name="overwrite.hibernate.files" value="false"/>
		</antcall>
		<antcall target="filterHibernateFilesWithoutConfiguration">
			<param name="overwrite.hibernate.files" value="false"/>
		</antcall>
	</target>

	<target name="regenerateGenerator">
		<echo>Generating xml template for POJO</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}calculatedCollection.template"/>
			<arg value="${generator.dir}${file.separator}calculatedCollection.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}calculators.template"/>
			<arg value="${generator.dir}${file.separator}calculators.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}property.template"/>
			<arg value="${generator.dir}${file.separator}property.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}entityReference.template"/>
			<arg value="${generator.dir}${file.separator}entityReference.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}aggregateReference.template"/>
			<arg value="${generator.dir}${file.separator}aggregateReference.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}methods.template"/>
			<arg value="${generator.dir}${file.separator}methods.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}initMembers.template"/>
			<arg value="${generator.dir}${file.separator}initMembers.xml"/>
		</java>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}pojo.template"/>
			<arg value="${generator.dir}${file.separator}pojo.xml"/>
		</java>
		<echo>Generating xml template for JavaBean</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}bean.template"/>
			<arg value="${generator.dir}${file.separator}bean.xml"/>
		</java>
		<echo>Generating xml template for interface</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}interface.template"/>
			<arg value="${generator.dir}${file.separator}interface.xml"/>
		</java>
		<echo>Generating xml template for hibernate mapping</echo>
		<java classname="Simple2XML" classpath="${tl.lib}">
			<arg value="${generator.dir}${file.separator}hibernate.template"/>
			<arg value="${generator.dir}${file.separator}hibernate.xml"/>
		</java>

		<echo>Generating POJO classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}calculatedCollection.xml"/>
			<arg value="${generator.dir}${file.separator}CalculatedCollectionPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}calculators.xml"/>
			<arg value="${generator.dir}${file.separator}CalculatorsPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}property.xml"/>
			<arg value="${generator.dir}${file.separator}PropertyPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}entityReference.xml"/>
			<arg value="${generator.dir}${file.separator}EntityReferencePG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}aggregateReference.xml"/>
			<arg value="${generator.dir}${file.separator}AggregateReferencePG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}methods.xml"/>
			<arg value="${generator.dir}${file.separator}MethodsPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}initMembers.xml"/>
			<arg value="${generator.dir}${file.separator}InitMembersPG.java"/>
		</java>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}pojo.xml"/>
			<arg value="${generator.dir}${file.separator}PojoPG.java"/>
		</java>
		<echo>Generating JavaBean classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}bean.xml"/>
			<arg value="${generator.dir}${file.separator}BeanPG.java"/>
		</java>
		<echo>Generating Interfaz classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}interface.xml"/>
			<arg value="${generator.dir}${file.separator}InterfacePG.java"/>
		</java>
		<echo>Generating hibernate mapping classes generator</echo>
		<java classname="TL2Java" classpath="${tl.lib}" fork="yes">
			<arg value="${generator.dir}${file.separator}hibernate.xml"/>
			<arg value="${generator.dir}${file.separator}HibernatePG.java"/>
		</java>

		<echo>Compiling classes generators</echo>
		<javac srcdir="${generator.dir}"
	         destdir="${generator.dir}"
	         classpath="${tl.lib};${xava.lib};${j2ee.lib}"
	   		 target="${javac.version}" source="${javac.version}"
    	/>

		<delete file="../${project}/gen-src-xava/dnas.properties"/>
		<delete file="../${project}/gen-src-xava/dnas-pojo.properties"/>
	</target>

	<target name="regenerateHibernate">
		<delete file="../${project}/gen-src-xava/dnas-pojo.properties"/>
		<delete>
			<fileset dir="../${project.name}/filtered-files" includes="**/*"/>
		</delete>
		<antcall target="generateHibernate"/>
	</target>

	<target name="generateHibernate" depends="filterXavaFiles">
		<mkdir dir="../${project}/build/hibernate"/>
		<echo>Generating POJOs/Hibernate</echo>
		<java 
			classname="HCodeGenerator" 
       		fork="yes">
			<arg value="${project}"/>
			<arg value="${domain}"/>
			<arg value="${package}"/>
			<arg value="${model.package}"/>
			<classpath>
				<pathelement path="${openxava.base.dir}/OpenXava/bin"/>
				<fileset dir="${openxava.base.dir}/OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${openxava.base.dir}/OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${generator.dir};${tl.lib};${xava.lib};${j2ee.lib};${groovy.lib};../${project}/filtered-files;../${project}/${classes.dir};${xava.generator.path}"/>
			</classpath>
		</java>		
		<antcall target="filterHibernateFiles"/>
	</target>

	<target name="clearGeneratedCode">
		<delete failonerror="false">
			<fileset dir="../${project}/gen-src"/>
			<fileset dir="../${project}/gen-src-xava"/>
			<fileset dir="../${project}/${meta-inf.dir}" excludes="MANIFEST.MF"/>
		</delete>
	</target>

	<target name="filterWithoutConfiguration" unless="configuration" 
		depends="init">
		<copy file="../${project.name}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.name}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy todir="../${project.name}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.name}/${meta-inf.dir}/backends"/>
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
	</target>

	<target name="filterWithConfiguration" if="configuration" 
		depends="init">
		<copy file="../${project.name}/${meta-inf.dir}/ejb-jar.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/ejb-jar.xml" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="separator" value="${separator}"/>
				<filter token="collection" value="${collection}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/jboss.xml" 
			toFile="../${project.name}/${classes.dir}/META-INF/jboss.xml" 
			overwrite="yes">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy file="../${project.name}/${meta-inf.dir}/ibm-ejb-jar-bnd.xmi" 
			toFile="../${project.name}/${classes.dir}/META-INF/ibm-ejb-jar-bnd.xmi" 
			overwrite="yes" failonerror="no">
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
		<copy todir="../${project.name}/${classes.dir}/META-INF/backends" 
			overwrite="yes" failonerror="no">
			<fileset dir="../${project.name}/${meta-inf.dir}/backends"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
				<filter token="subcontext" value="${subcontext}"/>
				<filter token="datasource" value="${datasource}"/>
				<filter token="package" value="${domain}/${package}"/>
			</filterset>
		</copy>
	</target>

	<target name="configureJNDI" depends="init" if="classic-xml">
		<antcall target="configureJNDIImpl"/>
	</target>

	<target name="configureJNDIImpl" if="jndi.conf">
		<copy file="../${project.name}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.name}/properties/jndi.properties" overwrite="true"/>
		<copy file="../${project.name}/properties/jndi-${jndi.conf}.properties" 
			tofile="../${project.name}/${classes.dir}/jndi.properties" overwrite="true"/>
	</target>

	<target name="prepareCompile">
		<!-- We create the 'lib' and 'classes' folder for it does not fails at the first time -->
		<mkdir dir="web/WEB-INF/lib"/>
		<mkdir dir="web/WEB-INF/classes"/>
	</target>

	<target name="createLibJars">
		<!-- openxava.jar -->
		<jar jarfile="${dist.dir}/lib/openxava.jar" basedir="${openxava.base.dir}/OpenXava/bin"/>
		<!-- server-properties.jar -->
		<mkdir dir="${server.properties.dir}"/>
		<copy toDir="${server.properties.tmp.dir}" overwrite="yes">
			<fileset dir="${server.properties.dir}" />
			<filterset>
				<filter token="subcontext" value="${subcontext}"/>
			</filterset>
		</copy>
		<jar jarfile="${dist.dir}/lib/server-properties.jar" basedir="${server.properties.tmp.dir}" />
	</target>

	<target name="updateDataSourceInfo" depends="init" if="classic-xml">
		<echo file="../${project.name}/filtered-files/datasource.properties">${domain}/${package}=${datasource.prefix}/${datasource}</echo>
		<echo file="../${project.name}/${classes.dir}/datasource.properties">${domain}/${package}=${datasource.prefix}/${datasource}</echo>
	</target>

	<target name="filterI18n" depends="init" if="classic-xml">
		<antcall target="filterI18nWithConfiguration"/>
		<antcall target="filterI18nWithoutConfiguration"/>
	</target>

	<target name="filterI18nWithConfiguration" if="configuration">
		<copy todir="../${project}/filtered-files" overwrite="true"	encoding="ISO-8859-1">
			<fileset dir="../${project}/i18n" excludes="portlets, portlets/*"/>
			<filterset>
				<filtersfile file="${configuration}.properties"/>
			</filterset>
		</copy>
	</target>

	<target name="filterI18nWithoutConfiguration" unless="configuration">
		<copy todir="../${project}/filtered-files" overwrite="true"	encoding="ISO-8859-1">
			<fileset dir="../${project}/i18n" excludes="portlets, portlets/*"/>
		</copy>
	</target>

	<target name="filter" depends="init, filterXavaFiles, filterHibernateFiles, filterI18n, updateDataSourceInfo" if="classic-xml">
		<copy todir="../${project}/${classes.dir}">
			<fileset dir="../${project}/filtered-files"/>
		</copy>
	</target>

	<target name="createEditorsJS">
		<fileset id="editorsjs.dir" dir="web/xava/editors/js">
			<include name="*.js" />
		</fileset>

		<pathconvert pathsep="&#xA;" property="editorsjs.files" refid="editorsjs.dir">
			<mapper type="flatten" />
		</pathconvert>

		<echo file="../${project}/web/WEB-INF/classes/editors-js.properties">${editorsjs.files}</echo>
	</target>

	<target name="prepareWar" depends="createDist, updateDataSourceInfo, configureJNDI">
		<antcall target="filter"/>
		<antcall target="createEditorsJS"/>
		<antcall target="createDefaultI18nFiles"/>
	</target>
	
	<target name="createDefaultI18nFiles">
		<copy file="../${project}/${classes.dir}/${project}-messages_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-messages.properties"
			failonerror="false" quiet="true"/> 
		<copy file="../${project}/${classes.dir}/${project}-labels_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/${project}-labels.properties"
			failonerror="false" quiet="true"/> 
		<copy file="../${project}/${classes.dir}/Mensajes${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Mensajes${project}.properties"
			failonerror="false" quiet="true"/> 
		<copy file="../${project}/${classes.dir}/Etiquetas${project}_${default.language}.properties" 
			tofile="../${project}/${classes.dir}/Etiquetas${project}.properties"
			failonerror="false" quiet="true"/> 		
	</target>

	<target name="deploy" depends="prepareWar">
		<!-- Commented in order to run Tutorial fine
		<delete file="${deploy.dir}/${name.war}.war" failonerror="false"/>
		-->
		<mkdir dir="${deploy.dir}/${name.war}${war.dir.suffix}"/>
		<copy todir="${deploy.dir}/${name.war}${war.dir.suffix}" preservelastmodified="true">
			<fileset dir="../${project}/web"/>
		</copy>
		<touch file="${deploy.dir}/${name.war}${war.dir.suffix}/WEB-INF/web.xml"/>
	</target>
	
	<target name="javac">
		<mkdir dir="${openxava.base.dir}/${compile.project}/bin"/>
		<delete includeemptydirs="true">
		  <fileset dir="${openxava.base.dir}/${compile.project}/bin" includes="**/*"/>
		</delete>
		<javac destdir="${openxava.base.dir}/${compile.project}/bin">
			<src path="${openxava.base.dir}/${compile.project}/src"/>
			<classpath>
				<fileset dir="${openxava.base.dir}/OpenXava/web/WEB-INF/lib">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${openxava.base.dir}/OpenXava/lib">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${j2ee.lib};${xava.compiler.path}"/>
			</classpath>
		</javac>
	</target>	
	
	<target name="defineJavaClass">
		<script language="javascript">
			var javaclass = project.getProperty("project").replace(/ /g,'').replace(/-/g,'');
			project.setProperty("javaclass", javaclass);
		 </script>
	</target>

	<target name="createAppLauncher" depends="defineJavaClass">
		<mkdir dir="../${project}/src/_run"/>
		<copy file="${openxava.base.dir}/OpenXava/project-templates/en/src/_run/AppLauncher.java"
			tofile="../${project}/src/_run/_Run_${javaclass}.java" overwrite="false">
			<filterset>
				<filter token="project" value="${project}"/>
				<filter token="javaclass" value="${javaclass}"/>
				<filter token="database" value="${project}DB"/>
			</filterset>
		</copy>
		<mkdir dir="../${project}/web/META-INF"/>
		<touch>
		    <fileset dir="../${project}/web/META-INF"/>
		</touch>
		<copy file="${openxava.base.dir}/OpenXava/project-templates/en/web/META-INF/context.xml" 
			tofile="../${project}/web/META-INF/context.xml" overwrite="false">
	    	<filterset>	    	
	    		<filter token="datasource" value="${project}DS"/> 
			</filterset> 			         
		</copy>			
	</target>
	
	<target name="defineSchemaToolPath">
		
		<path id="schema.tool.path"> 
			<!-- Library from OpenXava in order to work the first time
				before WEB-INF/lib of new project is populated -->
			<fileset dir="${openxava.base.dir}/OpenXava/web/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
			<path location="${openxava.base.dir}/OpenXava/bin" /> 
			<!-- Library of project to include custom libraries -->
			<fileset dir="../${project}/web/WEB-INF/lib">
				<include name="**/*.jar"/>
			</fileset>
			<path path="${j2ee.lib}"/>
			<path location="web/WEB-INF/classes"/>
			<path location="${schema.path}" />			
		</path>

	</target>	

	<!-- 
	Connects to database and actually modifies its tables from JPA entities definition.
	-->
	<target name="updateSchemaJPA" depends="defineSchemaToolPath">
		<java classname="org.openxava.tools.SchemaTool" classpathref="schema.tool.path" fork="true">
			<arg value="update"/>
			<arg value="${persistence.unit}"/>
		</java>	
	</target>
	
	
	<!-- 
	Generates the scheme and show it in the console, 
	but does not execute it against database.
	-->
	<target name="generateSchemaJPA" depends="defineSchemaToolPath">
		<java classname="org.openxava.tools.SchemaTool" classpathref="schema.tool.path" fork="true">
			<arg value="generate"/>
			<arg value="${persistence.unit}"/>
		</java>
	</target>  	
						
</project>
